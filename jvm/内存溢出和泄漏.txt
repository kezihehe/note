内存泄漏：
通过malloc或者new申请的内存空间，用完之后没有通过free或者delete将内存释放，导致
这块内存一直处于占用状态

内存泄漏是指程序中间动态分配了内存，但是在程序执行完毕之后没有释放这部分内存，
从而造成这部分内存不可用，重启计算机可以解决，但是也有再次发生内存泄漏的可能，
内存泄漏和硬件没有关系，他是由软件设计缺陷造成的。

可以分为4类
常发性内存泄漏：发生内存泄漏的代码会被多次执行，每次执行都会导致一块内存泄漏
偶发性内存泄漏：代码只有在某些特定的环境或者操作下才会发生
一次性内存泄漏：发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷
隐式内存泄漏：程序在运行过程中不停的申请内存，但是知道程序结束的时候才释放内存。严格来说，
这里并没有发生内存泄漏，因为最终程序释放了所有内存。但是对于一个服务器程序，需要运行几天
甚至几个月，不能及时释放内存也可能会导致内存被耗尽，这种情况称为“隐式内存泄漏”

内存溢出：
申请的内存空间小于要写入的数据大小，就是内存溢出



java中会存在内存泄漏吗？
java中存在内存泄漏。当被分配的对象可达但是已经没有用(未对作废数据内存单元的引用置null)就会引起。
例如

	Vector v=new Vector(10);
	for (int i=1;i<100; i) {
		Object o=new Object();
		v.add(o);
		o=null;
	}
	// 此时，所有的Object对象都没有被释放，因为变量v引用这些对象。
	// 对象加入到Vector后，还必须从Vector中删除，最简单释放方法就是将Vector对象设置为null。


如何避免内存泄漏、溢出？
(1) 尽早释放无用对象的引用
    在使用临时变量的时候，让引用变量在退出活动区域后自动设置为null，暗示垃圾回收器来收集该对象，防止发生内存泄漏
(2) 程序进行字符串处理时，尽量避免使用String，而是使用StringBuffer
(3) 尽量少用静态变量，因为静态变量是全局的，GC不会回收
(4) 避免集中创建对象，尤其是大对象，如果可以的话，尽量使用流操作
(5) 尽量使用对象池技术提高系统性能
(6) 不要在经常调用的方法中创建对象，尤其是在循环中创建对象
(7) 优化配置
	
内存溢出的解决方案
(1) 从代码层面进行优化
(2) 调整服务器参数配置




