JVM主要分为三个子系统:类加载子系统、运行时数据区、执行引擎

类的生命周期
类从被加载到虚拟机内存中开始，到卸载出内存为止，整个生命周期包含7个阶段。
加载(Loading)
验证(Verification)
准备(Preparation)
解析(Resolution)
初始化(Initialization)
使用(Using)
卸载(Unloading)
其中验证、准备、解析这三个阶段统称为连接(Linking)。


加载、验证、准备、初始化、卸载这5个阶段顺序是确定的。

加载阶段虚拟机主要完成3件事：
(1) 通过一个类的全限定名来获取定义此类的二进制字节流。
(2) 将字节流所代表的的静态存储结构转化为方法区运行时数据结构。
(3) 在内存中生成一个代表该类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。

在虚拟机规范中并没有明确规定java.lang.Class类的对象是在java堆中，对于HotSpot虚拟机而言，
Class对象比较特殊，它虽然是对象，但是存放在方法区。



验证
目的：确保class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。
不符合规则，则抛出java.lang.VerifyError异常或其子类异常

验证分为四个阶段：文件格式验证、元数据验证、字节码验证、符号引用验证
(1) 文件格式验证
验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。
魔数验证：是否以魔数0xCAFEBABE开头
版本号验证：主、次版本号是否在当前虚拟机处理范围之内
...




什么是类加载器
在虚拟机规范中，加载阶段定义了“通过一个类的全限定名来获取定义此类的二进制字节流”规范，但是虚拟机
设计团队把这个动作放到了java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类，实现这个
动作的代码模块称为“类加载器”。

唯一性确定
对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器，
都拥有一个独立的类名称空间。也就是说，比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提
下才有意义，否则，即使两个类来源于同一个Class文件，被同一个虚拟机加载，只要加载它们的类加载器不同，这
两个类就必定不相等。



类加载器分类
从java虚拟机角度来讲，只存在两种不同的类加载器：
(1) Bootstrap ClassLoader:启动类加载器，使用C++实现，是虚拟机的一部分
(2) 其他类加载器，这些类加载器都由java语言实现，独立于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。

从java开发人员角度来讲，系统提供了3种类加载器：
(1) Bootstrap ClassLoader:启动类加载器
负责将存放在JAVA_HOME/lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，
并且是虚拟机识别的(仅按照文件名识别，如rt.jar，名字不符合的类库即使存放在lib目录也不会被加载)类库加载到虚拟机中。

(2) Extension ClassLoader:扩展类加载器
负责加载JAVA_HOME/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中所有类库。

(3) Application ClassLoader:应用程序加载类库，也称为系统类加载器
负责加载classpath上所指定的类库，是程序中默认的类加载器


双亲委派模型
双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器。
类加载器之前的父子关系不是通过继承来实现，而是通过组合关系复用父类加载器的代码来实现。

工作过程：如果一个类加载器接收到了类加载请求，它首先不会自己去尝试加载这个类，而是把
这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都
应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围内
没有找到所需要的类)时，子加载器才会尝试自己去加载。

好处：java类随着它的类加载器一起具备了一种带有优先级的层次关系。

注意：编写一个与rt.jar类库中已有类重名的java类，可以正常编译，但是永远无法被加载运行。
















