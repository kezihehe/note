设置root密码
mysqladmin -u root password 123456

mysql服务自启动
chkconfig mysql on
chkconfig --list | grep mysql

rpm安装路径解释
/var/lib/mysql  mysql数据库文件存放路径
/usr/share/mysql 配置文件目录
/usr/bin 相关命令目录
/etc/init.d/mysql 启停脚本目录

字符集编码修改
show variables like 'character_%';
show variables like '%char%';

my.cnf
[client]
default-character-set=utf8

[mysqld]
character_set_server=utf8
character-set_client=utf8
colltion-server=utf8_general_ci
#注意linux下mysql安装完后是默认：表名区分大小写，列名不区分大小写
#0:区分大小写  1:不区分大小写
lower_case_table_names=1
#设置最大连接数，默认为151，mysql服务器允许的最大连接数16384
max_connections=1000
[mysql]
default-character-set=utf8



配置文件
log-bin=mysql-bin
log-error 默认是关闭的
log  慢查询日志

frm 表结构
myd 数据
myi 索引


查看存储引擎
当前mysql已经提供的存储引擎
show engines;
查看mysql默认的存储引擎
show variables like '%storage_engine%';


MyISAM和InnoDB的对比

aliSql+AliRedis

create index idx_tableName_columnName on tableName(columnName);


sql执行顺序

机读
from <left_table>
on <join_condition>
<join_type> join <right_table>
where <where condition>
group by <group_by_list> 
having <having_condition>
select
distinct <select_list>
order by <order_by_list>
limit <limit_number>



Join的七中模式

explain
id: 决定mysql加载表的顺序
    (1) id相同，执行顺序由上至下
	(2) 如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行
	(3) id如果相同，可以认为是一组，从上往下顺序执行；
	    在所有组中，id值越大，优先级越高，越先执行
        derived 衍生


type 访问类型
最好到最差依次是
system > const > eq_ref > ref > range > index > ALL
一般能保证查询到达range级别就可以，最好能达到ref级别


system:表只有一行记录(等于系统表)，这是const类型表的特例，平时不会出现，可以忽略不计
const:表示通过索引一次就能找到，const用于比较primary key和unique索引，因为只匹配一行数据，
      所以很快，如果将主键置于where列表中，mysql就能将该查询转换为一个常量。
eq_ref:唯一索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描
ref:非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也就是一种索引访问，他返回所有匹配
    某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。
range:检索指定范围的行，这种范围扫描索引比全表扫描要好，因为它只需要开始于索引的某一个点，
    而结束于另一个点，不用扫描全部索引
index:Full Index Scan，扫描所有的索引，index与all的区别为index类型只遍历索引树，这通常比All快，
    因为索引文件通常比数据文件小
	all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读取的。
All:Full Table Scan，将遍历全表找到匹配行


possible_keys:显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段上若
    存在索引，则该索引将被列出，但不一定被查询实际使用。
	
key:实际使用的索引，如果为NULL，则没有使用索引

覆盖索引(索引覆盖):select后面的查询字段和创建的索引的字段个数和顺序刚好匹配，则可以使用该索引
理解一：select的数据列只用从索引中就能够取得，不必读取数据行，mysql可以利用索引返回select
列表中的字段，而不必根据索引再次读取数据文件，换句话说：查询列要被所建的索引覆盖

理解二：索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必
读取整个行。毕竟索引叶子节点存储额它们索引的数据；当能够通过读取索引就可以得到想要的数据，那就
不需要读取行了。一个索引包含了(或覆盖了)满足查询结果的数据，就叫做覆盖索引



key_len:表示索引中使用的字节数，可通过该列计算查询中使用的索引长度，在不损失精确性的情况下，
    长度越短越好

ref:显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值
	
rows:根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数

Extra:包含不适合在其他列中显示但十分重要的额外信息

Using filesort:说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引的顺序进行读取。
    mysql中无法利用索引完成的排序操作称为“文件排序”

Using temporary:使用了临时表保存中间结果，mysql在对查询结果排序时使用临时表，
    常见于排序order by和分组查询group by语句中。
	
Using index:表示相应的select操作中使用了覆盖索引(Covering Index),避免了访问表的数据行，效率不错
    如果同时出现using where，表明索引被用来执行索引键值的查找
	如果没有出现using where，表明索引被用来读取数据而非执行查找动作
	
Using where:表示使用了where条件做过滤
using join buffer:使用了连接缓存
impossible:where子句的值总是false，不能用来获取任何元素
select tables optimized away:
distinct:
	
	
#########################################################################################
show index from table_name;#查看表的索引

create index idx_col1_col_2 on table_name (col1,col2); #创建col1和col2为复合索引
alter table table_name add index idx_col1_col_2 (col1,col2);#第二种创建方式
drop index idx_col1_col_2 on table_name;#删除指定的索引


小案例分析
单表情况下，避开在范围条件上建立索引，因为使用范围查询时，范围后的索引会失效。
两表连接时，左连接，索引建在右边上，右连接建在左表上，即建立在子表上。
三表连接时，将三表连接看成是两个两表连接，在两个子表上建立索引。

join优化总结
尽可能减少join语句中的NestedLoop的循环总次数，永远用小结果集驱动大的结果集。
优先优化NestedLoop的内层循环
保证join语句中子表上join条件字段已经被索引。
当无法保证子表的join条件字段被索引且内存资源充足的前提下，可以将joinBuffer调大。


#########################################################################
索引优化

1. 全值匹配我最爱

2. 最佳左前缀法则：如果索引了多列，要遵循最左前缀法则；
    指的是从索引的最左前列开始，并且不跳过索引中的列。
记忆口诀：带头大哥不能死；中间兄弟不能断。

3. 不在索引列上做任何操作,否则会导致索引失效而转向全表扫描
    计算、函数、自动或手动类型转换
记忆口诀：索引列上少计算

4. 存储引擎不能使用索引中范围条件右边的列
记忆口诀：范围之后全失效

5. 尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，减少select *。

6. mysql在使用不等于(!=或者<>)的时候，无法使用索引，会导致全盘扫描


7. is null、is not null也无法使用索引

8. like以通配符开头('%abc')，mysql索引失效，会变成全表扫描
%abc% 全表扫描
%abc  全表扫描
abc%  使用索引
如果必须使用%abc%的形式，则可以使用覆盖索引，避免全表扫描

记忆口诀：百分like加右边

9. 字符串不加单引号索引失效
原因：不加单引号，则mysql在底层做了隐式转换，将数字(例如2000)转换成字符串('2000')，
当对索引列做操作时，索引失效，参考第3条。

记忆口诀：字符串里有引号

10. 少用or，用or来连接时会索引失效









#######################################################################
mysql锁

锁是计算机协调多个进程或线程并发访问某一资源的机制。

从数据操作类型上分：
读锁(共享锁):针对同一份数据，多个读操作可以同时进行而不会相互影响
写锁(排它锁):当写操作没有完成前，它会阻断其他写锁和读锁

从数据操作粒度上分：
表锁(偏读):
偏向MyISAM存储引擎，开销小，加锁快，无死锁；锁定力度大，并发效率最低

#手动增加表锁
lock table 表名字 read(write),表名字2 read(write);

#查看表上存在的锁
show open tables;

#解锁
unlock tables;

MyISAM总结：
MyISAM在执行查询语句(select)前，会自动给涉及的所有表加读锁；
在执行增删改操作前，会自动给涉及的表加写锁。

(1) 读操作时，不会阻塞其他进程对统一表的读请求，但会阻塞对同一表的写请求，只有当读锁
释放后，才会执行其他进程的写操作。
(2) 写操作时，会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其他进程的
读写操作。
(3) 简而言之，就是读锁会阻塞写，但是不会阻塞读，而写锁会把读和写都阻塞。

表锁分析：
show open tables;#查看那些表被锁了
show status like 'table%';#查看锁表的参数
table_locks_waited:产生表级锁定的次数，表示可以立即获取锁的查询次数，
    每立即获取锁值加1。
table_locks_immediate:出现表级锁定争用而发生等待的次数(不能立即获取锁
    的次数，每等待一次锁值加1)，此值高则说明存在着较严重的表级锁争用情况。

MyISAM的读写锁调度是写优先，这也是MYISAM不适合做写为主表的引擎。因为写锁后，
其他线程不能进城任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。


行锁(偏写):偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度较小，发生锁冲突
    的概率最低，并发度也最高。
	
InnoDB和MyISAM的最大不同点：支持事务;采用行级锁。

事务和ACID
事务是由一组sql语句组成的逻辑处理单元
原子性(Atomicity):事务是一个原子操作单元，其对数据的修改，要么全部执行，要么全部不执行。
一致性(Consistent):事务在开始和完成时，数据都必须保持一致状态，这意味着所有相关的数据规则
    都必须应用与事务的修改，以保持数据的完整性；事务结束时，所有内部数据结构(如B树索引或
	双向链表)也都必须是正确的。
隔离性(Isolation):数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境
    执行。这意味着事务处理过程中的中间状态对外部都是不可见的，反之亦然。
持久性(Durable):事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。


并发事务处理带来的问题
更新丢失(Lost update)
脏读(Dirty Reads)
不可重复读(Non-Repeatable Reads)
幻读(Phantom Reads)

事务隔离级别
未提交读(Read uncommitted):最低级别，只能保证不读取物理上损坏的数据
已提交读(Read committed):语句级
可重复读(Repeatable Read):事务级
可序列化(Serializable):最高级别，事务级

#查看当前数据库的事务隔离级别：
show variables like 'tx_isolation';

set autocommit=0; #关闭事务自动提交

特别注意:索引失效行锁变表锁。

什么是间隙锁？
当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的
已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙(GAP)”,InnoDB
会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁(Next-Key锁)。

间隙锁的危害
因为Query执行过程中通过范围查找的话，它会锁定整个范围内所有的索引键值，即使这个键值不存在。
间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，
而造成在锁定的时候无法插入锁定键值范围内的任何数据，在某些场景下这可能会对性能造成很大的危害。

如何锁定一行
begin;
select * from test_innodb_lock where id=8 for update;#注意for update
commit;
要点：select xx for update 锁定一行后，其他的操作会被阻塞，直到锁定行的会话提交commit。

行锁分析：
通过检查innodb_row_lock状态变量来分析系统上行锁的争夺情况
show status like 'innodb_row_lock%';
innodb_row_lock_current_waits:当前正在等待行锁的数量
innodb_row_lock_waits:系统启动后到现在总共等待的次数
innodb_row_lock_time:从系统启动到现在锁定总时间长度
innodb_row_lock_time_avg:每次等待所花平均时间
innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间



############################################################################
主从复制

mysql复制过程三步：
(1) master将改变记录到二进制日志(binary log)。这些记录过程叫做二进制日志事件(binary log events)
(2) slave将master的二进制日志拷贝到它的中继日志(relay log)
(3) slave本地启动SQL线程，重做中继日志中的事件，将改变应用到自己的数据库中。
mysql复制是异步的、串行化的。

一主一从配置
master配置，在[mysqld]下配置
#1.[必须项]主服务器唯一ID
server-id = 1     

#2.[必须项]启用二进制日志
#log-bin=自己本地路径/mysqlbin
log-bin=/home/mysql/data/mysqlbin

#3.[可选项]启用错误日志
#log-err=自己本地路径/mysqlerr
log-err=/home/mysql/log/mysqlerr

#4.[可选项]根目录
basedir=/usr/local/mysql

#5.[可选项]临时目录
tmpdir=/xx/xx

6.[可选项]数据目录
datadir=/home/mysql/data

#7.主机读写都可以
read-only=0

#8.[可选项]设置不要复制的数据库
binlog-ignore-db=mysql

#9.[可选项]设置需要复制的数据库
binlog-do-db=需要复制的数据库名字


slave配置
#1.[必须项]从服务器唯一ID
server-id=2
#2.[可选项]启用二进制日志
log-bin=xxx


配置完成后，分别重启master和slave，使配置生效

master和slave开放IP和端口或者关闭防火墙

#master上创建授权账号
grant replication slave on *.* to 'zhangsan'@'slaveIP' identified by '123456';
flush privileges;#使权限立即生效

#查看master的状态，并记录File和position的值
show master status;

#在slave上配置
change master to master_host='IP地址',
master_user='',
master_password='',
master_log_file='File名字',
master_log_position=position数字;

start slave;#启动从机

#查看slave状态，是否配置成功
show slave status\G
当看到如下连个信息同时为yes时表示配置成功
Slave_IO_Running:yes
Slave_SQL_Running:yes

#当配置失败后，可以使用stop slave停止slave，重新配置。
stop slave;
注意：如果master进行了数据操作，需要通过show master status重新查看file和position
的值，重新配置slave，否则依然配置不成功。











































页锁
































































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	






































