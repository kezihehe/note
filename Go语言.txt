

结构体
type 结构体名称 struct{

}

go语言中的结构体和java中的class有很多相似之处，但是结构体没有继承。


例子：
type Person struct {
	Name string
	Age int
}

p := Person{}
p.Name = "tom"
p.Age = 19
fmt.Println(p)

p1 := Person{
	Name : "jack",
	Age :10,
}
fmt.Println(p1)

普通传递方式是值拷贝，如果需要做引用传递，则需要使用指针
值传递
func A(per Person){
	per.Age = 12
	fmt.Println(per)
}
A(p1) #调用
引用传递(指针)
func A(per *Person){
	per.Age = 45
	fmt.Println(per)
}
A(&p1)

p := Person{} #p中存的是值
p := &Person{} #p中存的是指针(推荐使用方式)


结构体匿名使用方式
p := &struct{
	Name string
	Age int
}{
	Name : 'hello',
	Age : 12,
}

如果结构体中数据类型相同的，可以简写
type Animal struct{
	Name,Color string
}

结构体实现类似继承的功能

#定义类似于基类的结构体
type human struct{
	Sex int
}

#定义类似子类的结构体
type teacher struct{
	human    #实现类似继承功能
	Name string #子类特有的属性
	Age int
}

#使用一
t := teacher{
	Name :'Gao',
	Age :50,
	human :human{Sex:0}
}

#使用二
t.human.Sex=1

#使用三，如果teacher和human中有相同字段，则该使用三方式会发生冲突，需要使用第二种方式
t.Sex=3























