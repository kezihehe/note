JMM:Java Memory Model,java内存模型

java内存模型的主要目标是定义程序中各个变量的访问规则，即在jvm中将变量
存储到内存和从内存中取出变量这样的底层细节。

java语言中，使用“共享内存模型”来实现多线程之间的信息交换和数据同步。


JMM规定所有的变量都存储在主内存(Main Memory)中。每个线程还有自己的工作内存(Work Memory)，
线程的工作内存中保存了该线程使用到的变量的主内存的副本拷贝，线程对变量的所有操作(读取、赋值)
都必须在工作内存中进行，而不能直接读写主内存中变量(volatile变量仍然有工作内存拷贝，但是由于它
特殊的操作顺序性规定，所以看起来如同直接在主内存中读写访问一般)。不同的线程之间也无法直接访问
对方工作内存中的变量，线程之间值得传递都需要通过主内存来完成。

Java内存模型的三个特征：
原子性
可见性
有序性

原子性：一个操作不能被打断，要么全部执行完毕，要么不执行，类似于事务操作。
注意：long和double类型的变量是64位，在32位jvm中，需要分作两次读写，导致在32位jvm中是非原子操作，线程不安全。

可见性：一个线程对共享变量做了修改之后，其他的线程立即能够看到(感知到)该变量的修改。
保证可见性的方式
(1) volatile:volatile的特殊规则保证了volatile变量值修改后的新值立刻同步到主内存，每次使用volatile变量前立即从
主内存中刷新，因此volatile保证了多线程之间的操作变量的可见性，而普通变量则不能保证这一点。

(2) synchronized:在同步方法/同步块开始时(Monitor Enter)，使用共享变量时会从主内存中刷新变量值到工作内存中(即
从主内存中读取变量最新值到线程私有的工作内存中)，在同步方法/同步块结束时(Monitor Exit)，会将工作内存中的变量值
同步到主内存中去(即将线程私有的工作内存中的值写入到主内存进行同步)。

(3) lock:使用锁来实现可见性。最常用的是ReentrantLock(重入锁)来实现。当我们在方法的开始位置执行lock.lock()方法，
则从主内存中读取最新值到线程私有的工作内存中，当执行lock.unlock()方法时，将线程私有工作内存中的值写入到主内存
中进行同步。

(4) final关键字：被final关键字修饰的变量。



有序性
指令重排


Java提供了两个关键字volatile和synchronized来保证多线程之间操作的有序性,
volatile关键字本身通过加入内存屏障来禁止指令的重排序，
synchronized关键字通过一个变量在同一时间只允许有一个线程对其进行加锁的规则来实现





happens-before原则













