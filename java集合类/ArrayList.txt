ArrayList是基于数组实现的，是一个动态数组，其容量可以自动增长

ArrayList不是线程安全的

ArrayList默认容量为10

带有Collection参数的构造方法，将Collection转化为数组赋值为ArrayList的实现数组elementData

ensureCapacity():扩充容量的方法
ArrayList在每次增加元素(1个或者一组)时，都要调用该方法用来确保elementData数组有足够的容量。
当容量不足以容纳当前的元素个数时，就设置新的容量为原有容量的1.5倍加1，如果设置后的新容量还
不够，则直接将新容量设置为传入的参数，然后调用Arrays.copyof()方法将元素拷贝到新的数组中。所以，
当容量不够时，都要将原来元素拷贝到一个新的数组中，拷贝过程非常耗时，所以在元素数量确定的情况下，
使用ArrayList，否则应该使用LinkedList。


Arrays.copyof()方法在底层调用了System.arraycopy()方法，该方法是native的，该函数实际上调用了C语言
的memmove()函数，因此它可以保证同一个数组内元素的正确复制和移动，比一般的复制方法实现的效率要高
很多，因此在涉及到数组拷贝时，推荐使用Arrays.copyof()方法。

ArrayList基于数组实现，可以通过下标索引直接查找到指定位置的元素，因此查找效率高，但每次插入或删除元素，
就要大量地移动元素，插入删除元素的效率低



多线程环境下可以考虑用Collections.synchronizedList(List l)函数返回一个线程安全的ArrayList类，也可以使用concurrent并发包下的CopyOnWriteArrayList类


ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，
实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆












































